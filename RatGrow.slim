initialize() {
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(dimensionality="xy");//, periodicity="xy");
	initializeSex("A");
	
	defineConstant("Rd", 1000); // desired rat density per km^2
	defineConstant("A", 10); // island area (km^2)
	defineConstant("M", 1/(sqrt(A)*1000)); // 1 meter
	defineConstant("N", A*Rd); // desired total population size
	defineConstant("H", 25*M); // home range (m)
	defineConstant("dI", H*3); // Max Interaction Distance
	defineConstant("dAvg", 30*M); // juvenile dispersal mean distance
	defineConstant("dMax", 2000*M); // juvenile dispersal mean distance
	defineConstant("EN", 9433); // Equelibrium population size

	defineConstant("m", 0.00142857); // Density dependance tuning parameter 
	defineConstant("I", 0.1); // initialization area edge length (fraction of total arena)
	defineConstant("N0", I*I*EN); // Initial population size
	defineConstant("Ps", 0.9); // probability of survival w/o competition
	defineConstant("L", 4); // litter size
	defineConstant("Ia", 0.1); //proportion of adults that are itinerant
	
	defineConstant("Pr", 0.000); // probability of resistance
	defineConstant("Pc", 1); // probability of conversion to drive
	defineConstant("Ng", 1); // number of gRNAs
	defineConstant("R", 0.2); // release radius
	defineConstant("RP", 1); // fraction of females inside release area converted to drive heterozygotes
	defineConstant("Fs", 2/3); //Probability a resistance allele generated by drive disrupts the target site

	
	initializeMutationType("m1", 0.5, "f", 0.0); //D
	initializeMutationType("m2", 0.5, "f", 0.0); //w
	initializeMutationType("m3", 0.5, "f", 0.0); //r1
	initializeMutationType("m4", 0.5, "f", 0.0); //r2
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 10);
	initializeMutationRate(0);
	initializeRecombinationRate(0);

	// spatial competition
	initializeInteractionType(1, "xy", reciprocal=T, maxDistance=dI);
	i1.setInteractionFunction("n", 1.0, H);

	// spatial mate choice
	initializeInteractionType(2, "xy", reciprocal=T, maxDistance=dI);
}

reproduction(NULL, "F") {
	rep_f = p1.individuals[p1.individuals.sex == "F"];
	rep_m = p1.individuals[p1.individuals.sex == "M"];
	driver = sim.mutationsOfType(m1);
	wildtype = sim.mutationsOfType(m2);
	resistance = sim.mutationsOfType(m4);
	rep_f = rep_f[c(rep_f.countOfMutationsOfType(m2) > 0 |rep_f.countOfMutationsOfType(m3)>0)];

	if(size(rep_f) & size(rep_m)){
		for(i in seqLen(size(rep_f))){
			neighbors = i2.nearestNeighbors(rep_f[i], p1.individualCount);
			neighbors = neighbors[neighbors.sex == "M"];
			if(size(neighbors)){
				mate = sample(neighbors, 1);
				litterSize = rpois(1, L);
				for (j in seqLen(litterSize)) {
					subpop.addCrossed(rep_f[i], mate);
				}
			}
		}
	}
	self.active = 0;
}

1 early() {
	sim.addSubpop("p1", asInteger(N0));

	p1.individuals.age = 1;
	genomes = p1.individuals.genomes[!p1.individuals.genomes.isNullGenome];
	for(i in 0:(1-Ng)) {
		genomes.addNewDrawnMutation(m2, i); //add wildtype
	}
	
	// random initial positions
	for (ind in p1.individuals) {
		x = 0.5-(I/2)+runif(1,0,I);
		y = 0.5-(I/2)+runif(1,0,I);
		ind.setSpatialPosition(c(x,y));
	}
	cat('#N: ');
	catn(p1.individualCount);
	/*cat("#Position: ");
	catn(p1.individuals.spatialPosition);
	cat("#Age: ");
	catn(p1.individuals.age);*/
}

early() {
	i1.evaluate();
	inds = p1.individuals;

	itin = c();
	adult = c();
	for(ind in inds[inds.age > 0]){
		if (runif(1) < Ia){
			itin = c(itin, ind);
		} else {
			adult = c(adult, ind);
		}
	}
		fit = c(inds[inds.age==0],itin);

	competition = i1.totalOfNeighborStrengths(fit);
	rel_den = ((competition/(PI*(3*H/(M*1000))^2)));
	sol = Ps - rel_den*m;
	sol[sol<0] = 0;
	if(size(adult))
		adult.fitnessScaling = Ps;
	
	if(size(itin)){
		for(it in itin) {
		
			r = min(rexp(1, dAvg), dMax);
			theta = runif(1, 0, 2*PI);
			pos = it.spatialPosition + c(r*sin(theta), r*cos(theta));
			itin.setSpatialPosition(p1.pointReflected(pos));
		}
	}
		fit.fitnessScaling = sol;

}

late()
{
/*for(ind in p1.individuals) {
		if(ind.countOfMutationsOfType(m3) == 1){
			ind.color = "blue";
		} else if(ind.countOfMutationsOfType(m3) == 2){
			ind.color = "orange";
		} else if(ind.countOfMutationsOfType(m1) > 0){
			ind.color = "red";
		} else {
			ind.color = "yellow";
		}
	}*/
	cat('#N: ');
	catn(p1.individualCount);
	/*cat("#Position: ");
	catn(p1.individuals.spatialPosition);
	cat("#Age: ");
	catn(p1.individuals.age);*/
	i2.evaluate();
	if(p1.individualCount == 0) {
		sim.simulationFinished();
	}
	
}

/*50 late() {
	center = 0.5;
	centerFemales = p1.individuals[(p1.individuals.sex == "F") & (sqrt((p1.individuals.x - center)^2 + (p1.individuals.y-center)^2) < 0.1)];
	centerFemales = centerFemales[centerFemales.age > 0];
	centerFemales = sample(centerFemales, asInteger(floor(centerFemales.size()*0.5*1.0)));
	femaleGenomes = centerFemales.genomes;
	femaleGenomes = femaleGenomes[!femaleGenomes.isNullGenome];
	femaleGenomes = femaleGenomes[seq(1, size(femaleGenomes)-1, 2)];
	femaleGenomes.removeMutations(sim.mutationsOfType(m2));
	femaleGenomes.addNewDrawnMutation(m1, 0); //add driver
}*/

modifyChild() {
	ParentsGenomes=c(parent1Genome1, parent2Genome1, parent1Genome2, parent2Genome2);
	ChildGenomes = c(childGenome1, childGenome2);

	driver = sim.mutationsOfType(m1);
	wildtype = sim.mutationsOfType(m2);
	resistance = sim.mutationsOfType(m3);
	for(j in c(0, 1)) {
	
		ParentGenomes = c(ParentsGenomes[j], ParentsGenomes[j+2]);
		if((sum(child.genomes[j].containsMutations(sim.mutationsOfType(m1))) == 0) &
			(sum(ParentGenomes.containsMutations(sim.mutationsOfType(m1))) == 1)) {

			for(Genome in ParentGenomes) {
				if(sum(Genome.containsMutations(driver)) == 0){
					// if there are wildtype alleles (not drive and not resistance
					if(sum(Genome.containsMutations(wildtype))) {
						r_conversions = c();
						for(i in Genome.positionsOfMutationsOfType(m2)) {
							// convert to resistance allele with
							// probability Pr
							if(runif(1) <= Pr) {
								r_conversions = c(r_conversions, i);
							}
						}
						while(size(r_conversions)){
							pos = sample(r_conversions, 1);
							r_conversions = r_conversions[r_conversions != pos];
							muts = c(pos);
							for(i in min(muts):max(muts)){
								if(runif(1) > Fs) {
									child.genomes[j].removeMutations(wildtype[wildtype.position == i]);
									child.genomes[j].addNewDrawnMutation(m3, i);
								} else {
									child.genomes[j].removeMutations(wildtype[wildtype.position == i]);
									child.genomes[j].addNewDrawnMutation(m4, i);
								}
							}
						}
						for(i in child.genomes[j].positionsOfMutationsOfType(m2)) {
							// convert to drive allele with
							// probability Pc
							if(runif(1) <=Pc) {
								child.genomes[j].removeMutations(sim.mutationsOfType(m2));
								child.genomes[j].removeMutations(sim.mutationsOfType(m3));
								child.genomes[j].removeMutations(sim.mutationsOfType(m4));
								child.genomes[j].addMutations(sim.mutationsOfType(m1));
								break;
							}
						}
					}
				}
			}
		}
	}
	r = min(rexp(1, dAvg), dMax);
	theta = runif(1, 0, 2*PI);
	pos = parent1.spatialPosition + c(r*sin(theta), r*cos(theta));
	child.setSpatialPosition(p1.pointReflected(pos));
	return T;
}

1500 late() {
	sim.simulationFinished();
}
